# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net


variables:
  - group: "KinsonServer"
  - name: BuildPlatform
    value: "x64"
  - name: SolutionBuildConfiguration
    value: "Release-SDL"
  - name: UnitTestBuildConfiguration
    value: "Release"
  - name: ParticleEngineConfiguration
    value: "Release"
  - name: ParticleEngineProjectDirName
    value: "KD.Particle.Engine"
  - name: TargetFramework
    value: "netstandard2.0"



jobs:
  - job: Build_Job
    displayName: "Build Job"
    pool:
      name: "KinsonDigital"
      
    steps:
    - task: NuGetToolInstaller@1
      displayName: "Use Nuget 5.2.0"
      inputs:
        versionSpec: 5.2.0


    - task: UseDotNet@2
      enabled: true
      displayName: "Use DotNet SDK 2.2.x"
      inputs:
        version: 2.2.x
        installationPath: "$(Agent.ToolsDirectory)/dotnet"


    - task: NuGetCommand@2
      displayName: "Nuget Restore"
      inputs:
        command: restore
        nugetConfigPath: "**/*.sln"


    - task: DeleteFiles@1
      displayName: "Clean Particle Engine Output Folder"
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\$(ParticleEngineProjectDirName)\bin\$(BuildPlatform)\Release\$(TargetFramework)'
        Contents: '*.*'


    - task: VSBuild@1
      displayName: "Build Solution"
      inputs:
        platform: "$(BuildPlatform)"
        configuration: "Release-SDL"
        solution: "$(Build.SourcesDirectory)/*.sln"
        vsVersion: latest


    - task: DeleteFiles@1
      displayName: "Delete Particle Engine Nuget Packages"
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\$(ParticleEngineProjectDirName)\bin\$(BuildPlatform)\Release'
        Contents: '*.nupkg'


    - task: VSBuild@1
      displayName: "Create Particle Engine Nuget Package"
      inputs:
        solution: "**/KD.Particle.Engine/*.csproj"
        msbuildArgs: "-t:pack"
        platform: "x64"
        configuration: "Release"


    - task: CopyFiles@2
      displayName: "Copy Particle Engine Nuget Package To Output"
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\$(ParticleEngineProjectDirName)\bin\$(BuildPlatform)\Release'
        Contents: '*.nupkg'
        TargetFolder: '$(Build.SourcesDirectory)\$(ParticleEngineProjectDirName)\bin\$(BuildPlatform)\Release\$(TargetFramework)'
        OverWrite: true


    - task: CopyFiles@2
      displayName: "Copy Particle Engine Project File To Output"
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\$(ParticleEngineProjectDirName)'
        Contents: '*.csproj'
        TargetFolder: '$(Build.SourcesDirectory)\$(ParticleEngineProjectDirName)\bin\$(BuildPlatform)\Release\$(TargetFramework)'
        OverWrite: true


    - task: PublishBuildArtifacts@1
      displayName: "Publish Particle Engine Build Artifacts"
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)/$(ParticleEngineProjectDirName)/bin/$(BuildPlatform)/$(ParticleEngineConfiguration)/$(TargetFramework)
        ArtifactName: "drop"
        publishLocation: "Container"




  - job: "Unit_Testing"
    displayName: "Unit Testing"
    dependsOn: Build_Job
    pool:
      name: "KinsonDigital"

    steps:
    - task: UseDotNet@2
      displayName: "Use NET Core SDK 3.0.100 Preview 7"
      inputs:
        packageType: "sdk"
        version: "3.0.100-preview7-012821"
        includePreviewVersions: true


    - task: DotNetCoreCLI@2
      displayName: "Run Unit Tests"
      inputs:
        configuration: $(UnitTestBuildConfiguration)
        command: test
        projects: "$(Build.SourcesDirectory)/*.sln"
        arguments: "--configuration $(SolutionBuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"


    - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
      displayName: "Install & Run Report Generator"


    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage Results
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: "$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml"
